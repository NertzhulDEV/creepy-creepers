plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${mod_name}-Quilt-${minecraft_version}"

architectury {
    injectInjectables = false
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        client {
            client()
            setRunDir("run/client")
        }
        server {
            server()
            setRunDir("run/server")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modImplementation "org.quiltmc:quilt-config:${quilt_config_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilt_fabric_api_version}-${minecraft_version}"

    modRuntimeOnly("maven.modrinth:modmenu:${mod_menu_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range, forge_loader_version_range: forge_loader_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['quilt.mod.json']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}