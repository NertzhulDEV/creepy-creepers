import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.time.OffsetDateTime
import java.time.ZoneOffset

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("com.diluv.schoomp:Schoomp:1.2.6")
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
minecraft {
    mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            jvmArg "-Dterminal.ansi=true"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                creepycreepers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            args '--nogui', "true"
            jvmArg "-Dterminal.ansi=true"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                creepycreepers {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/server')
            args '--nogui', "true"
            jvmArg "-Dterminal.ansi=true"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                creepycreepers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/client')
            jvmArg "-Dterminal.ansi=true"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                creepycreepers {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

processResources {
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: mod_version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

var manifestAttributes = [
        "Specification-Title"     : mod_name,
        "Specification-Vendor"    : 'Nertzhul',
        "Specification-Version"   : "1",
        "Implementation-Title"    : mod_name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   : 'Nertzhul',
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        "Build-On-Minecraft"      : minecraft_version
]

jar {
    from("LICENSE.txt") {
        rename {
            "LICENSE_${archiveBaseName.get()}.txt"
        }

        manifest.attributes(manifestAttributes)
        includeEmptyDirs false
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
license {
    ignoreFailures = false
    header = project.file('LicenseHeader.txt')
    include '**/*.java'
    include '**/*.kt'
    exclude '**/package-info.java'
    exclude '**/module-info.java'
    newLine = false
    properties {
        name = mod_name
        source = mod_source
        author = 'Nertzhul'
    }
}

task publishToCurseForge(type: TaskPublishCurseForge) {
    apiToken = project.findProperty("curseforge_api_token") ?: "invalid/no CurseForge API token found!"

    def mainFile = upload(curseforge_project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

    mainFile.displayName = "${archivesBaseName}-${version}"
    mainFile.releaseType = curseforge_release_type
    mainFile.addModLoader(curseforge_mod_loader)
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion(curseforge_java_version)

    mainFile.changelog = mod_changelog_url
}

tasks.publishToCurseForge.dependsOn(tasks.assemble)
